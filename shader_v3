Shader "Custom/Shader_v3" 
{
    Properties
    {
        _Color ("Color", Color) = (1, 1, 1, 1)
        _GradientMap ("Gradient Map", 2D) = "white" {}
        _MainTex ("Main Texture", 2D) = "white" {}
        _TranslucencyColor ("Translucency Color", Color) = (1, 1, 1, 1)
        _Opacity ("Opacity", Range(0, 1)) = 1.0
        _Cutoff("Alpha Cutoff", Range(0.0, 1.0)) = 0.5

        [MainColor] _BaseColor("Color", Color) = (0.5,0.5,0.5,1)
        [MainTexture] _BaseMap("Albedo", 2D) = "white" {}

        //Primarily affects the dispersement. 0.5 is ideal
        _Smoothness("Specular Intensity", Range(0.0, 1.0)) = 0.5

        
        _OcclusionStrength("Strength", Range(0.0, 1.0)) = 1.0
        _OcclusionMap("Occlusion", 2D) = "white" {}

        // Blending. from URP 
        [HideInInspector] _Surface("__surface", Float) = 0.0
        [HideInInspector] _Blend("__blend", Float) = 0.0
        [HideInInspector] _SrcBlend("__src", Float) = 1.0
        [HideInInspector] _DstBlend("__dst", Float) = 0.0
        [HideInInspector] _ZWrite("__zw", Float) = 0.0
        [HideInInspector] _Cull("__cull", Float) = 2.0

        [ToggleUI]_ReceiveShadows("Receive Shadows", Float) = 0.0
    }

    SubShader
    {
        // With SRP we introduce a new "RenderPipeline" tag in Subshader. This allows to create shaders
        // that can match multiple render pipelines. If a RenderPipeline tag is not set it will match
        // any render pipeline. In case you want your subshader to only run in LWRP set the tag to
        // "UniversalRenderPipeline"
        Tags
        {
            "RenderType" = "Opaque" 
            "RenderPipeline" = "UniversalRenderPipeline" 
            "IgnoreProjector" = "True"
        }
        LOD 300

    // Isolate the alpha cutout
    Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"
            #include "AutoLight.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                UNITY_VERTEX_INPUT_INSTANCE_ID
                float4 vertex : SV_POSITION;
                TRANSFER_SHADOW(o)
            };

            sampler2D _MainTex;
            sampler2D _GradientMap;
            fixed4 _Color;
            fixed4 _TranslucencyColor;
            float _Opacity;
            float _Cutoff;

            v2f vert(appdata v) //the vertex shader
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv;
                UNITY_SETUP_INSTANCE_ID(v);
                return o;
            }

            fixed4 frag(v2f i) : SV_Target //the frag shader, for the faces
            {
                //float3 normal = normalize(i.worldNormal);
                //float NdotL = dot(_WorldSpaceLightPos0, normal);


                fixed4 c = tex2D(_MainTex, i.uv) * _Color * tex2D(_GradientMap, i.uv);

                // Set the opacity to fade alpha completely 
                c.a *= _Opacity;
                
                // take out the alpha cutoff
                clip(c.a - _Cutoff);

                // create translucency by blending the param color
                float translucencyFactor = _Opacity;
                c.rgb = lerp(c.rgb, _TranslucencyColor.rgb, c.a * translucencyFactor);

                return c;
            }

            ENDCG

        }

        //Draw lighting
        Pass
        {
            Name "StandardLit"
            Tags{"LightMode" = "UniversalForward"}

            // set up additive pass
            Blend one one 
            ZWrite off
            Cull[_Cull]

            HLSLPROGRAM
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0


            #pragma shader_feature _ALPHATEST_ON
            #pragma shader_feature _ALPHAPREMULTIPLY_ON
            #pragma shader_feature _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A

            #pragma shader_feature _SPECULARHIGHLIGHTS_OFF
            #pragma shader_feature _GLOSSYREFLECTIONS_OFF
            #pragma shader_feature _SPECULAR_SETUP
            #pragma shader_feature _RECEIVE_SHADOWS_ON

            #pragma multi_compile _ _MAIN_LIGHT_SHADOWS
            #pragma multi_compile _ _ADDITIONAL_LIGHTS_VERTEX _ADDITIONAL_LIGHTS
            #pragma multi_compile _ _ADDITIONAL_LIGHT_SHADOWS
            #pragma multi_compile _ _SHADOWS_SOFT
            #pragma multi_compile _ 
            #pragma multi_compile_shadowcaster

            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile _ LIGHTMAP_ON

            #pragma multi_compile_instancing

            #pragma vertex LitPassVertex
            #pragma fragment LitPassFragment


            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.universal/Shaders/LitInput.hlsl"

            struct Attributes
            {
                float4 positionOS   : POSITION;
                float3 normalOS     : NORMAL;
                float4 tangentOS    : TANGENT;
                float2 uv           : TEXCOORD0;
                float2 uvLM         : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };

            struct Varyings
            {
                float2 uv                       : TEXCOORD0;
                float2 uvLM                     : TEXCOORD1;
                float4 positionWSAndFogFactor   : TEXCOORD2; // from original URP design. Leaving it here just in case
                half3  normalWS                 : TEXCOORD3;

                #if _NORMALMAP
                    half3 tangentWS                 : TEXCOORD4;
                    half3 bitangentWS               : TEXCOORD5;
                #endif

                #ifdef _MAIN_LIGHT_SHADOWS
                    float4 shadowCoord              : TEXCOORD6; 
                #endif
                    float4 positionCS               : SV_POSITION;
            };

            Varyings LitPassVertex(Attributes input)
            {
                Varyings output;
                
                VertexPositionInputs vertexInput = GetVertexPositionInputs(input.positionOS.xyz);
                VertexNormalInputs vertexNormalInput = GetVertexNormalInputs(input.normalOS, input.tangentOS);

                // Computes fog factor per-vertex. just in case
                float fogFactor = ComputeFogFactor(vertexInput.positionCS.z);

                // TRANSFORM_TEX is the same as the old shader library.
                output.uv = TRANSFORM_TEX(input.uv, _BaseMap);
                output.uvLM = input.uvLM.xy * unity_LightmapST.xy + unity_LightmapST.zw;

                output.positionWSAndFogFactor = float4(vertexInput.positionWS, fogFactor);
                output.normalWS = vertexNormalInput.normalWS;

                // Checking for light elements in the scene
                #ifdef _MAIN_LIGHT_SHADOWS
                    output.shadowCoord = GetShadowCoord(vertexInput);
                #endif
                    output.positionCS = vertexInput.positionCS;
                    return output;
            }

            half4 LitPassFragment(Varyings input) : SV_Target
            {
                SurfaceData surfaceData;
                InitializeStandardLitSurfaceData(input.uv, surfaceData);

                //generic normals for the sake of lightmaps
                half3 normalWS = input.normalWS;

                #ifdef LIGHTMAP_ON
                    half3 bakedGI = SampleLightmap(input.uvLM, normalWS);
                #else
                    half3 bakedGI = SampleSH(normalWS);
                #endif

                    float3 positionWS = input.positionWSAndFogFactor.xyz;
                    half3 viewDirectionWS = SafeNormalize(GetCameraPositionWS() - positionWS);

                    BRDFData brdfData;
                    InitializeBRDFData(surfaceData, brdfData);

                //Covers directional light aka the sun
                #ifdef _MAIN_LIGHT_SHADOWS
                    Light mainLight = GetMainLight(input.shadowCoord);
                #else
                    Light mainLight = GetMainLight();
                #endif

                    
                half3 color =  LightingPhysicallyBased(brdfData, mainLight, normalWS, viewDirectionWS);

                    // Additional lights like point lights etc
                #ifdef _ADDITIONAL_LIGHTS
                    int additionalLightsCount = GetAdditionalLightsCount();
                    for (int i = 0; i < additionalLightsCount; ++i)
                    {
                        Light light = GetAdditionalLight(i, positionWS);
                        color += LightingPhysicallyBased(brdfData, light, normalWS, viewDirectionWS);
                    }
                #endif

                    return half4(color, surfaceData.alpha);
            }
            ENDHLSL
        }

        UsePass "Universal Render Pipeline/Lit/ShadowCaster"
    
}
}
